#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Membership
  STANDARD = 0
  PREMIUM = 1
  VALUE_MAP = {0 => "STANDARD", 1 => "PREMIUM"}
  VALID_VALUES = Set.new([STANDARD, PREMIUM]).freeze
end

module Currency
  USD = 0
  PLN = 1
  EUR = 2
  GBP = 3
  CHF = 4
  VALUE_MAP = {0 => "USD", 1 => "PLN", 2 => "EUR", 3 => "GBP", 4 => "CHF"}
  VALID_VALUES = Set.new([USD, PLN, EUR, GBP, CHF]).freeze
end

class BankClient; end

class LoanParams; end

class TransactionResponse; end

class InvalidOperation < ::Thrift::Exception; end

class BankClient
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  MEMBERSHIP = 2
  INCOME = 3
  CURRENCY = 4
  KEY = 5

  FIELDS = {
    ID => {:type => ::Thrift::Types::I64, :name => 'id'},
    MEMBERSHIP => {:type => ::Thrift::Types::I32, :name => 'membership', :enum_class => ::Membership},
    INCOME => {:type => ::Thrift::Types::I64, :name => 'income'},
    CURRENCY => {:type => ::Thrift::Types::I32, :name => 'currency', :enum_class => ::Currency},
    KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @membership.nil? || ::Membership::VALID_VALUES.include?(@membership)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field membership!')
    end
    unless @currency.nil? || ::Currency::VALID_VALUES.include?(@currency)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field currency!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LoanParams
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MONEY = 1
  MONTHS = 2
  CURRENCY = 3

  FIELDS = {
    MONEY => {:type => ::Thrift::Types::I64, :name => 'money'},
    MONTHS => {:type => ::Thrift::Types::I32, :name => 'months'},
    CURRENCY => {:type => ::Thrift::Types::I32, :name => 'currency', :enum_class => ::Currency}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @currency.nil? || ::Currency::VALID_VALUES.include?(@currency)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field currency!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class TransactionResponse
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ACCEPTED = 1
  REASON = 2

  FIELDS = {
    ACCEPTED => {:type => ::Thrift::Types::BOOL, :name => 'accepted'},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class InvalidOperation < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  WHY = 1
  ARG_NUMBER = 2

  FIELDS = {
    WHY => {:type => ::Thrift::Types::STRING, :name => 'why'},
    ARG_NUMBER => {:type => ::Thrift::Types::I32, :name => 'arg_number'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

