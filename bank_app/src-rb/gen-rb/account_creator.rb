#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'bank_types'

module AccountCreator
  class Client
    include ::Thrift::Client

    def create_account(id, monthly_income, currency)
      send_create_account(id, monthly_income, currency)
      return recv_create_account()
    end

    def send_create_account(id, monthly_income, currency)
      send_message('create_account', Create_account_args, :id => id, :monthly_income => monthly_income, :currency => currency)
    end

    def recv_create_account()
      result = receive_message(Create_account_result)
      return result.success unless result.success.nil?
      raise result.op unless result.op.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_account failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_create_account(seqid, iprot, oprot)
      args = read_args(iprot, Create_account_args)
      result = Create_account_result.new()
      begin
        result.success = @handler.create_account(args.id, args.monthly_income, args.currency)
      rescue ::InvalidOperation => op
        result.op = op
      end
      write_result(result, oprot, 'create_account', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Create_account_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    MONTHLY_INCOME = 2
    CURRENCY = 3

    FIELDS = {
      ID => {:type => ::Thrift::Types::I64, :name => 'id'},
      MONTHLY_INCOME => {:type => ::Thrift::Types::I64, :name => 'monthly_income'},
      CURRENCY => {:type => ::Thrift::Types::I32, :name => 'currency', :enum_class => ::Currency}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field monthly_income is unset!') unless @monthly_income
      unless @currency.nil? || ::Currency::VALID_VALUES.include?(@currency)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field currency!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_account_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    OP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BankClient},
      OP => {:type => ::Thrift::Types::STRUCT, :name => 'op', :class => ::InvalidOperation}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

